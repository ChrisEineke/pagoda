#!/usr/bin/env node

const cli = require("command-line-args")
const fs = require("fs-extra")
const path = require("path")
const tmp = require("tmp")
const when = require("when")

const Pagoda = require("../src")


tmp.setGracefulCleanup()

const commandOptions = cli([
    { name: "command", type: String, defaultOption: true },
], {
    stopAtFirstUnknown: true
})
const argv = commandOptions._unknown || []

const options = cli([
    { name: "manifest", type: String, defaultOption: true },
    { name: "outputDir", type: String }
], { argv })

const manifestFilepath = options["manifest"] || "manifest.yaml"
const manifestFactory = new Pagoda.ManifestFactory([
    path.dirname(path.resolve(process.cwd(), manifestFilepath)),
    process.cwd(),
])
const manifest = manifestFactory.fromYamlFile(manifestFilepath)
const templateFactory = new Pagoda.TemplateFactory([
    path.dirname(path.resolve(process.cwd(), manifestFilepath)),
    path.resolve(process.cwd(), "templates"),
    path.resolve(__dirname, "../templates"),
    process.cwd(),
])
const outputDir = options["outputDir"] || tmp.dirSync().name
const command = commandOptions["command"]

function generateTemplates(templates, context, outputDir) {
    return when.map(templates, template => {
        return template.generate(context).then(res => {
            return fs.writeFile(path.join(outputDir, res.id), res.contents)
        })
    })
}

if (command == "requires" || command == "all") {
}

if (command == "provides" || command == "all") {
}

if (command == "resources" || command == "all") {
    when.try(() => {
        return fs.ensureDir(outputDir)
    }).then(() => {
        return when.map(manifest.resources, manifestId => {
            return manifestFactory.fromId(manifestId).then(manifest => {
                return when.map(manifest.provides, provide => {
                    return generateTemplates(templateFactory.fromId(provide.template), {
                        id: manifest.id,
                        owner: manifest.owner,
                    }, outputDir)
                })
            })
        })
    })
}

if (command == "integrations" || command == "all") {
}

if (command == "deployments" || command == "all") {
    when.try(() => {
        return fs.ensureDir(outputDir)
    }).then(() => {
        return when.map(manifest.deployments, deploymentId => {
            return generateTemplates(templateFactory.fromId(deploymentId), {
                id: manifest.id,
                owner: manifest.owner,
            }, outputDir)
        })
    })
}

console.log(outputDir)
