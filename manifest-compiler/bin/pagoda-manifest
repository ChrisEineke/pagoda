#!/usr/bin/env node

const cli = require("command-line-args")
const fs = require("fs-extra")
const lo = require("lodash")
const path = require("path")
const tmp = require("tmp")
const winston = require("winston")

const Pagoda = require("../src")


tmp.setGracefulCleanup()
winston.add(winston.transports.File, { filename: "pagoda.log" })
winston.remove(winston.transports.Console)

const commandOptions = cli([
    { name: "command", type: String, defaultOption: true },
], {
    stopAtFirstUnknown: true
})
const argv = commandOptions._unknown || []

const options = cli([
    { name: "manifest", type: String, defaultOption: true },
    { name: "outputDir", type: String },
    { name: "logLevel", type: String },
], { argv })

winston.level = options["logLevel"] || "info"

const outputDir = options["outputDir"] || tmp.dirSync().name

const manifestFilepath = options["manifest"] || "manifest.yaml"
const manifestDAO = new Pagoda.ManifestDAO([
    path.dirname(path.resolve(process.cwd(), manifestFilepath)),
    path.resolve(process.cwd(), "stereotypes"),
    path.resolve(__dirname, "../stereotypes"),
    process.cwd(),
])
const templateDAO = new Pagoda.TemplateDAO([
    path.dirname(path.resolve(process.cwd(), manifestFilepath)),
    path.resolve(process.cwd(), "templates"),
    path.resolve(__dirname, "../templates"),
    process.cwd(),
])
const stereotypeDAO = new Pagoda.StereotypeDAO([
    path.dirname(path.resolve(process.cwd(), manifestFilepath)),
    path.resolve(process.cwd(), "stereotypes"),
    path.resolve(__dirname, "../stereotypes"),
    process.cwd(),
])
const command = commandOptions["command"];

(async function main() {
    try {
        let unexpandedManifest = await manifestDAO.fromYamlFile(manifestFilepath)
        let manifest = await unexpandedManifest.expand({
            stereotypeDAO: stereotypeDAO,
            manifestDAO: manifestDAO,
            templateDAO: templateDAO,
            context: unexpandedManifest,
        })
        switch (command) {
        case "dump":
            console.log(manifestDAO.toYaml(manifest))
            break
        case "compile":
            await fs.ensureDir(outputDir)
            await manifestDAO.toYamlFile(manifest, path.join(outputDir, 'manifest.yaml'))
            const templates = await manifest.collectTemplates()
            lo.forEach(templates, async (val, key) => {
                await fs.writeFile(path.join(outputDir, key), val)
            })
            break
        }
    }
    catch (e) {
        winston.error(e)
        console.error(e)
    }
})()
